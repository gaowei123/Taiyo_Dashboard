
@{
    ViewBag.Title = "Monthly Attendance Summary Report";
}

<div class="container-fluid">
    <div class="row titleRow">
        <div class="col">
            <img id="titleImg" class="titleImg" src="~/Resources/Images/headericon.gif" />
            <span class="titleText">Monthly Attendance Summary Report</span>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 panel panel-default searchingPanel" style="padding-top:10px;">

            <div class="row form-inline searchingBar ">
                <div class="col-sm-3">
                    <label style="width:35%">Year:</label>
                    <select id="ddlYear" class="form-control" data-ng-style="btn-info" style="width:60%;">
                        @for (int i = 2019; i <= DateTime.Now.Year; i++)
                        {
                            if (i == DateTime.Now.Year)
                            {
                                <option value="@i.ToString()" selected="selected">@i.ToString()</option>
                            }
                            else
                            {
                                <option value="@i.ToString()">@i.ToString()</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    <label style="width:35%">Month:</label>
                    <select id="ddlMonth" class="form-control" data-ng-style="btn-info" style="width:60%;">
                        @for (int i = 1; i <= 12; i++)
                        {
                            if (i == DateTime.Now.Month)
                            {
                                <option value="@i.ToString()" selected="selected">@i.ToString()</option>
                            }
                            else
                            {
                                <option value="@i.ToString()">@i.ToString()</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-sm-3"></div>
                <div class="col-sm-3" align="right" style="padding-right:2%;">
                    <input type="button" class="btn btn-success" value="Generate" onclick="search();" />
                </div>
            </div>

        </div>
    </div>

    
    <div class="row">
        <div class="col-sm-12 panel panel-default" style="padding-top:10px;">

            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active">
                    <a href="#ExcludedAL" aria-controls="home" role="tab" data-toggle="tab">Excluded AL</a>
                </li>
                <li role="presentation">
                    <a href="#IncludedAL" aria-controls="wip" role="tab" data-toggle="tab">Included AL</a>
                </li>                
            </ul>



            <!-- Tab panes -->
            <div class="tab-content" style="margin-top:10px;">
                <div role="tabpanel" class="tab-pane fade in active" id="ExcludedAL">                   
                    <table id="tbReportEx" data-toggle="table"> </table>
                    <hr />
                    <div id="divChartEx"></div>
                </div>
                <div role="tabpanel" class="tab-pane fade" id="IncludedAL">
                    <table id="tbReportIn" data-toggle="table"> </table>
                    <hr />
                    <div id="divChartIn"></div>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="~/plugins/bootstrap-table-1.15.3/dist/bootstrap-table.min.js"></script>
<link href="~/plugins/bootstrap-table-1.15.3/dist/bootstrap-table.min.css" rel="stylesheet" />
<script src="~/plugins/incubator-echarts-master/dist/echarts.min.js"></script>


<script type="text/javascript">

    var apiGetData = window.globalConfig.rootDirectory + '/Attendance/GetMonthlySummaryReport';    
    var chartEx = echarts.init(document.getElementById('divChartEx'));
    var chartIn = echarts.init(document.getElementById('divChartIn'));



    $(document).ready(function () { search(); });


    function search() {

        var searchParams = {
            Year : $('#ddlYear').val(),
            Month: $('#ddlMonth').val()
        }

        $.ajax({
            type: "POST",
            dataType: "json",
            url: apiGetData,
            data: searchParams,

            beforeSend: function () {
                chartEx.showLoading();
                chartIn.showLoading();
            },

            success: function (data) {
                if (data == null || data == undefined || data.length == 0) {
                    alert('No record found, Please try again!');
                    return false;
                }


                initTable(data);

                initChart(data);
            },

            complete: function () {
                chartEx.hideLoading();
                chartIn.hideLoading();
                chartEx.resize({ height: 400 });
                chartIn.resize({ height: 400 });
            },

            error: function () {
                alert("数据加载异常 !");
                chartEx.hideLoading();
                chartIn.hideLoading();
            }
        });
        
    }


    function initTable(data) {

        //根据选择的月份, 遍历每一天生成表头
        let dateStart = new Date($('#ddlYear').val() + '-' + $('#ddlMonth').val() + '-1');
        let dateEnd = new Date(dateStart.setMonth(dateStart.getMonth() + 1));
        dateStart = new Date($('#ddlYear').val() + '-' + $('#ddlMonth').val() + '-1');
        let dateTemp = dateStart;


        let columns = [];
        columns.push({
            field: 'Department',
            title: 'Department',
            align: 'center',
            valign: 'middle',
            cellStyle: function (value, row, index) {
                if (row.Department === 'Total') {
                    return { css: { 'font-weight': 'bold' } };
                } else { return {}; }
            }
        });


        while (dateTemp < dateEnd) {

            let strArr = dateTemp.toDateString().split(' ');//--> ["Fri", "Jan", "01", "2021"]
            if (strArr[0] === 'Sat' || strArr[0] === 'Sun') {
                dateTemp = new Date(dateTemp.setDate(dateTemp.getDate() + 1));
                continue;
            }
            
            let monthName = strArr[1];
            let day = dateTemp.getDate();

            columns.push({
                field: day + '-' + monthName,
                title: day + '-' + monthName,
                align: 'center',
                valign: 'middle',
                cellStyle: function (value, row, index) {
                    if (row.Department === 'Total') {
                        return { css: { 'font-weight': 'bold' } };
                    } else { return {}; }
                }
            });

            dateTemp = new Date(dateTemp.setDate(dateTemp.getDate() + 1));
        }
        //根据选择的月份, 遍历每一天生成表头




        //整理原始的data数据 对应表头, 生成对象数组

        //给table赋值的数组对象.
        let excludedDatas = [];
        let includedDatas = [];


        //遍历每个department
        const departments = ['Moulding', 'Painting', 'Laser', 'PQC', 'Assembly', 'Prod Office', 'HR/Finance', 'Planning/Purchasing', 'Sales/Project', 'QA/QC/FA', 'Store', 'TSS', 'Total'];
        departments.forEach(function (dpt) {

            //获取每个department的所有天的列表
            let departmentList = data.filter(item=>item.Department === dpt);

            const objExcluded = { Department: dpt };
            const objIncluded = { Department: dpt };


            //遍历列表,将所有天数添加到一个对象中.
            departmentList.forEach(function (item2) {
                let day = parseInt(item2.Day.split('-')[0]);
                let month = item2.Day.split('-')[1]
                let today = parseInt(new Date().toString().split(' ')[2]);
                let currentMonth = new Date().toString().split(' ')[1];


                //查询的月份中, 有大于当天的数据, 空值显示.
                objExcluded[item2.Day] = day > today && month === currentMonth ? '' : item2.ExcludedAL;
                objIncluded[item2.Day] = day > today && month === currentMonth ? '' : item2.IncludedAL;
            })

            //将单个department 所有天数的生成的对象添加到结果数组中.
            excludedDatas.push(objExcluded);
            includedDatas.push(objIncluded);
        });

        

        $('#tbReportEx').bootstrapTable('destroy');
        $('#tbReportEx').bootstrapTable({
            theadClasses: 'thead-title',//表头样式 undefined, thead-light, thead-dark,
            classes: 'table table-bordered table-hover table-striped',//表格样式
            striped: false,  //表格显示条纹，默认为false
            pagination: false, // 在表格底部显示分页组件，默认false
            cache: false, // 设置为 false 禁用 AJAX 数据缓存， 默认为true
            showFooter: false,   //显示合计栏

            columns: columns,
            data: excludedDatas,

            onLoadSuccess: function (data) { },
            onLoadError: function () {
                alert("列表数据加载异常");
            }
        });


        $('#tbReportIn').bootstrapTable('destroy');
        $('#tbReportIn').bootstrapTable({
            theadClasses: 'thead-title',//表头样式 undefined, thead-light, thead-dark,
            classes: 'table table-bordered table-hover table-striped',//表格样式
            striped: false,  //表格显示条纹，默认为false
            pagination: false, // 在表格底部显示分页组件，默认false
            cache: false, // 设置为 false 禁用 AJAX 数据缓存， 默认为true
            showFooter: false,   //显示合计栏

            columns: columns,
            data: includedDatas,

            onLoadSuccess: function (data) { },
            onLoadError: function () {
                alert("列表数据加载异常");
            }
        });

    }
    
    function initChart(data) {

        let arrSeriesEx = [];
        let arrSeriesIn = [];
        let arrAxisXLable = [];


        //遍历每个Department, 每个Department生成chart对应的series push到 arrSeries
        const departments = ['Moulding', 'Painting', 'Laser', 'PQC', 'Assembly', 'Prod Office', 'HR/Finance', 'Planning/Purchasing', 'Sales/Project', 'QA/QC/FA', 'Store', 'TSS', 'Total'];
        departments.forEach(function (item) {

            
        let arrDataEx = [];
        let arrDataIn = [];

            
        data.filter(obj=> obj.Department === item)
            .forEach(function (objDpt) {

                //将单个department下, 每一天的数据push到 arrData中.
                arrDataEx.push(objDpt.ExcludedAL.replace('%', ''));
                arrDataIn.push(objDpt.IncludedAL.replace('%', ''));

                //配置axisX label 数组, 配置一次就可以了.
                if (item ==='Moulding' ) {
                    arrAxisXLable.push(objDpt.Day);
                }
            });

        //根据department配置每个series
        var objSeriesEx = {
            name: item,
            type: 'line',
            data: arrDataEx,
            label: {
                show: true,
                position: 'insideTop',
                formatter: function (params) {
                    return params.data === '0.00' ? '' : params.data + '%';
                }
            }
        };
        //根据department配置每个series
        var objSeriesIn = {
            name: item,
            type: 'line',
            data: arrDataIn,
            label: {
                show: true,
                position: 'insideTop',
                formatter: function (params) {
                    return params.data === '0.00' ? '' : params.data + '%';
                }
            }
        };

        arrSeriesEx.push(objSeriesEx);
        arrSeriesIn.push(objSeriesIn);
        });
     
        let optionEx = {
            tooltip: {
                trigger: 'axis',
                formatter: function (params) {
                    let html = params[0].name + "<br>";
                    for (let i = 0; i < params.length; i++) {
                        html += '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' + params[i].color + ';"></span>'
                        html += params[i].seriesName + ":" + params[i].value + "%<br>";
                    }
                    return html;
                }
            },
            legend: {
                type: 'scroll',
                data: departments,
                top: 10
            },
            xAxis: [
                {
                    type: 'category',
                    data: arrAxisXLable,
                    axisPointer: {
                        type: 'shadow'
                    },
                    axisLabel: {
                        interval: 0
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: 'Attendance%',
                    min: 0,
                    max: 100,
                    interval: 10,
                    axisLabel: {
                        formatter: '{value}%'
                    }
                }
            ],
            series: arrSeriesEx
        };

        let optionIn = {
            tooltip: {
                trigger: 'axis',
                formatter: function (params) {
                    let html = params[0].name + "<br>";
                    for (let i = 0; i < params.length; i++) {
                        html += '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' + params[i].color + ';"></span>'
                        html += params[i].seriesName + ":" + params[i].value + "%<br>";
                    }
                    return html;
                }
            },
            legend: {
                type: 'scroll',
                data: departments,
                top: 10
            },
            xAxis: [
                {
                    type: 'category',
                    data: arrAxisXLable,
                    axisPointer: {
                        type: 'shadow'
                    },
                    axisLabel: {
                        interval: 0
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: 'Attendance%',
                    min: 0,
                    max: 100,
                    interval: 10,
                    axisLabel: {
                        formatter: '{value}%'
                    }
                }
            ],
            series: arrSeriesIn
        };
     
         
        chartEx.clear();
        chartIn.clear();

        chartEx.setOption(optionEx, true);
        chartIn.setOption(optionIn, true); 
    }



    //解决tab切换不显示问题 在加载窗口后重新渲染。
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        chartEx.resize({ height: 400 });
        chartIn.resize({ height: 400 });
    });


    $(window).resize(function () {
        $('#tbReportEx').bootstrapTable('resetView');
        $('#tbReportIn').bootstrapTable('resetView');
        chartEx.resize({ height: 400 });
        chartIn.resize({ height: 400 });

       if ($(window).width() < 550) {
           $('#titleImg').hide();
       } else {
           $('#titleImg').show();
       }
    });



</script>


